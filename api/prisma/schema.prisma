generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
  seed     = "ts-node prisma/seed.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Capability {
  capability_id          Int                      @id @default(autoincrement())
  capability_name        String?                  @db.VarChar(255)
  capability_lead_id     Int?
  country_id             Int?
  Users                  Users?                   @relation(fields: [capability_lead_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_capability_lead")
  Country                Country?                 @relation(fields: [country_id], references: [country_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_capability_region")
  Capability_Employee    Capability_Employee[]
  Capability_People_Lead Capability_People_Lead[]
}

model Capability_Employee {
  capability_id                                   Int
  people_lead_id                                  Int
  employee_id                                     Int
  Capability                                      Capability @relation(fields: [capability_id], references: [capability_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_capability_emp_capability")
  Users_Capability_Employee_employee_idToUsers    Users      @relation("Capability_Employee_employee_idToUsers", fields: [employee_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_capability_emp_user")
  Users_Capability_Employee_people_lead_idToUsers Users      @relation("Capability_Employee_people_lead_idToUsers", fields: [people_lead_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_capability_emp_lead")

  @@id([capability_id, people_lead_id, employee_id])
}

model Capability_People_Lead {
  capability_id    Int
  capability_pl_id Int
  Capability       Capability @relation(fields: [capability_id], references: [capability_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_capability_pl_capability")
  Users            Users      @relation(fields: [capability_pl_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_capability_pl_users")

  @@id([capability_id, capability_pl_id])
}

model Certificate_Skills {
  certificate_id Int
  skill_id       Int
  Certificates   Certificates @relation(fields: [certificate_id], references: [certificate_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_certificate_skills_certificate")
  Skills         Skills       @relation(fields: [skill_id], references: [skill_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_certificate_skills_skill")

  @@id([certificate_id, skill_id])
}

model Certificates {
  certificate_id             Int                  @id @default(autoincrement())
  certificate_name           String?              @db.VarChar(255)
  certificate_desc           String?
  certificate_estimated_time Int?
  certificate_level          Int?
  provider                   String?              @db.VarChar(255)
  Certificate_Skills         Certificate_Skills[]
}

model Employee_Position {
  position_id   Int
  user_id       Int
  level         Int?
  start_date    DateTime?     @db.Timestamp(6)
  end_date      DateTime?     @db.Timestamp(6)
  Work_Position Work_Position @relation(fields: [position_id], references: [position_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_employee_position_work")
  Users         Users         @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_employee_position_user")

  @@id([position_id, user_id])
}

model Goal_Skills {
  goal_id  Int
  skill_id Int
  Goals    Goals  @relation(fields: [goal_id], references: [goal_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_goal_skills_goal")
  Skills   Skills @relation(fields: [skill_id], references: [skill_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_goal_skills_skill")

  @@id([goal_id, skill_id])
}

model Goals {
  goal_id     Int           @id @default(autoincrement())
  goal_name   String?       @db.VarChar(255)
  goal_desc   String?
  Goal_Skills Goal_Skills[]
}

model Permits {
  role_id            Int      @id @default(autoincrement())
  is_employee        Boolean?
  is_people_lead     Boolean?
  is_capability_lead Boolean?
  is_delivery_lead   Boolean?
  is_admin           Boolean?
  Users              Users[]
}

model Skills {
  skill_id           Int                  @id @default(autoincrement())
  name               String?              @db.VarChar(255)
  technical          Boolean?
  Certificate_Skills Certificate_Skills[]
  Goal_Skills        Goal_Skills[]
  User_Skills        User_Skills[]
}

model User_Skills {
  user_id  Int
  skill_id Int
  Skills   Skills @relation(fields: [skill_id], references: [skill_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_skills_skill")
  Users    Users  @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_skills_user")

  @@id([user_id, skill_id])
}

model Users {
  user_id                                                       Int                      @id @default(autoincrement())
  mail                                                          String?                  @db.VarChar(255)
  password                                                      String?                  @db.VarChar(255)
  name                                                          String?                  @db.VarChar(255)
  birthday                                                      DateTime?                @db.Timestamp(6)
  hire_date                                                     DateTime?                @db.Timestamp(6)
  gender                                                        Boolean?
  role_id                                                       Int?
  country_id                                                    Int?
  Capability                                                    Capability[]
  Capability_Employee_Capability_Employee_employee_idToUsers    Capability_Employee[]    @relation("Capability_Employee_employee_idToUsers")
  Capability_Employee_Capability_Employee_people_lead_idToUsers Capability_Employee[]    @relation("Capability_Employee_people_lead_idToUsers")
  Capability_People_Lead                                        Capability_People_Lead[]
  Employee_Position                                             Employee_Position[]
  User_Skills                                                   User_Skills[]
  Country                                                       Country?                 @relation(fields: [country_id], references: [country_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_users_region")
  Permits                                                       Permits?                 @relation(fields: [role_id], references: [role_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_users_role")
}

model Work_Position {
  position_id       Int                 @id @default(autoincrement())
  position_name     String?             @db.VarChar(255)
  position_desc     String?
  company           String?             @db.VarChar(255)
  Employee_Position Employee_Position[]
}

model Country {
  country_id   Int          @id @default(autoincrement())
  country_name String?      @db.VarChar(255)
  region_name  String?      @db.VarChar(255)
  timezone     String?      @db.VarChar(255)
  Capability   Capability[]
  Users        Users[]
}
